{
  "GoMainSnippet": {
    "prefix": "gomain",
    "body": [
      "package main",
      "",
      "func main() {",
      " \t$0",
      "}"
    ],
    "description": "Generate a basic main code strucuture"
  },
    "GoInitFunction": {
    "prefix": "goinit",
    "body": [
      "func init() {",
      " \t$0",
      "}"
    ],
    "description": "Generate init function"
  },
  "GoFileSnippet": {
    "prefix": "gofile",
    "body": [
      "package ${1:name}",
      "",
      "func init() {",
      " \t$0",
      "}",
      "",
      "func main() {",
      " \t$0",
      "}"
    ],
    "description": "Generate a file with basic code strucuture"
  },
  "GoTestFile": {
    "prefix": "gotestfile",
    "body": [
      "package ${1:name}",
      "import \"testing\"",
      "func Test${2:NameFunction}(t *testing.T) {",
      " \t$0",
      "}"
    ],
    "description": "generate code to test file"
  },
  "GoFuncSnippet": {
    "prefix": "gofunc",
    "body": [
      "func ${1:name}(${2:params} ${3:type}) ${4:returnType} {",
      " return \t$0",
      "}"
    ],
    "description": "Generate a function with params and return types"
  },
  "GoEmptyFuncSnippet": {
    "prefix": "gofuncempty",
    "body": [
      "func ${1:name}() {",
      " \t$0",
      "}"
    ],
    "description": "Generate a empty function"
  },
  "GoFuncWithError": {
    "prefix": "gofuncerr",
    "body": [
      "func ${1:name}(${2:params} ${3:type}) (${4:returnType}, error) {",
      " return \t$0",
      "}"
    ],
    "description": "Generate a function which may result in an error"
  },
   "GoFuncTest": {
    "prefix": "gofunctest",
    "body": [
      "func Test${2:NameFunction}(t *testing.T) {",
      " \t$0",
      "}"
    ],
    "description": "Generate a function test"
  },
  "GoFuncHTTP": {
    "prefix": "gofunchtpp",
    "body": [
      "func ${1:FuncName}(w http.ResponseWriter, r *http.Request) {",
      " \t$0",       
      "}"
    ],
    "description": "Generate a function with http params"
  },
  "GoStruct": {
    "prefix": "gostruct",
    "body": [
    "type ${1:name} struct {",
    " ${2:varname} ${3:type}",
    " \t$0",
    "}"
    ],
    "description": "Generate a struct model"
  },
   "GoInterface": {
    "prefix": "gointerface",
    "body": [
      "type ${1:name} interface {",
      " ${2:exp()}  ${3:type}, ",
      " \t$0",
      "}"
    ],
    "description": "Declare a interface"
  },
  "GoInterfaceGeneric": {
    "prefix": "gointerfacegeneric",
    "body": [
      "func ${1:name}(${2:nameinterface} interface{}) {",
      " fmt.Println(interf) ",
      " \t$0",
      "}"
    ],
    "description": "Declare a generic interface"
  },
  "GoVarType": {
    "prefix": "govartype",
    "body": [
      "var ${1:name} ${2:type}"
    ],
    "description": "Generate a variable with type"
  },
   "GoVar": {
    "prefix": "govar",
    "body": [
      "${1:name} := ${2:val}"
    ],
    "description": "Generate a variable without type, inference"
  },
  "GoWiterHeader": {
    "prefix": "gowriteheader",
    "body": [
      "w.WriteHeader(http.${1:status})"
    ],
    "description": "Generate a variable without type, inference"
  },
  "GoWriter": {
    "prefix": "gowriter",
    "body": [
      "${1:varJSON}, err := json.Marshal(${2:objectToConvert})",
      "if err != nil {",
      " w.WriteHeader(http.StatusBadRequest)",
      " w.Write([]byte(\"${3:ErrorMessage\"))",
      " return",
      "}",
      "",
      "w.WriteHeader(http.StatusOK)",
      "w.Write(${1:varJSON})"
    ],
    "description": "Generate a variable json, or error and send json with response or error with http"
  },
   "GoMarshal": {
    "prefix": "gomarshal",
    "body": [
      "var ${1:varname} *${2:varType}",
      "${3:varJSON}, err := json.Marshal(*${1:varname})",
	    "if err != nil {",
        "w.WriteHeader(http.StatusBadRequest)",
        "w.Write([]byte(\"ErrorMessage\"))",
      "}"
    ],
    "description": "convet a object in json"
  },
   "GoUnmarshal": {
    "prefix": "gounsmarshal",
    "body": [
      "var ${1:varname} *${2:varType}",
      "if err = json.Unmarshal(body, &${1:varname}); err != nil {",
      " w.WriteHeader(http.StatusInternalServerError)",
      " w.Write([]byte(\"${3:ErrorMessage}\"))",
      " return",
      "}"
    ],
    "description": "Convert json in object"
  },
  "GoRoutesFilePackage": {
    "prefix": "goroutespackage",
    "body": [
      "package ${1:packagename} //use same package name inside your package",

      "func Setup${2:PackageName}Routes(router *mux.Router) {",
        "router.HandleFunc(\"/${1:packagename}\", CreateUser).Methods(http.MethodPost)",
        "router.HandleFunc(\"/${1:packagename}\", GetUsers).Methods(http.MethodGet)",
        "router.HandleFunc(\"/${1:packagename}/{id}\", GetUserById).Methods(http.MethodGet)",
        "router.HandleFunc(\"/${1:packagename}/{id}\", DeleteUserById).Methods(http.MethodDelete)",
        "router.HandleFunc(\"/${1:packagename}\", UpdateUserById).Methods(http.MethodPut)",
    "}"
    ],
    "description": "Generate package routes file"
  },
  "GoSetupRoutes": {
    "prefix": "gosetuproutes",
    "body": [
      "package ${1:packageName} //use same package name inside your package",
      "func SetupAppRoutes(router *mux.Router) {",
        "//examples",
        "users.SetupUserRoutes(router)",
        "product.SetupProductsRoutes(router)",
        "sales.SetupSalesRoutes(router)",
        "categories.SetupCategoriesRoutes(router)",
      "}"
    ],
    "description": "Generate a unique file to setup all packages routes"
  },
  "GoRoute": {
    "prefix": "goroute",
    "body": [
      "router.HandleFunc(\"/${1:routeName}\", ${2:Func}).Methods(http.${3:MethodHTPP})"
    ],
    "description": "Generate a single route"
  },
  "GoIf": {
    "prefix": "goif",
    "body": [
      "if ${1:var} ${2:operator} ${3:val} {",
      " \t$0",
      "}"
    ],
    "description": "Generate a if"
  },
  "GoSelect": {
    "prefix": "goselect",
    "body": [
    "select {",
    " case ${1:obj} := <-${2:channel}:",
    " \t$0",
    " case ${3:obj} := <-${4:channel}:",
    " ",
		"}"
    ],
    "description": "Generate a select structure"
  },
  "GoRoutineAnon": {
    "prefix": "goroutineanon",
    "body": [
    "go func(){",
    " \t$0",
    "}()"
    ],
    "description": "Generate a goroutine anon"
    },
    "GoRoutine": {
    "prefix": "goroutine",
    "body": [
    "go ${1:func}(${2:params}){",
    " \t$0",
    "}"
    ],
    "description": "Generate go routine with function"
  },
   "GoMap": {
    "prefix": "gomap",
    "body": [
      "var ${1:varname} map[${2:keytype}]${3:valuetype}",
      " \t$0",
      "}"
    ],
    "description": "Declare var map"
  },
  "GoMapWithValues": {
    "prefix": "gomapvalues",
    "body": [
      "${1:mapname} := map[${2:keytype}]${3:valuetype}{",
      " \"${4:key1}\" : \"${5:value1}\", ",
      " \"${6:key2}\" : \"${7:value2}\", ",
      " \t$0",
      "}"
    ],
    "description": "Declare var map with inference"
  },
 
  "GoFor": {
    "prefix": "gofor",
    "body": [
      "for ${1:k} := ${2:initial-value}; ${1:k} ${3:operator} ${4:value} ; ${1:k}${5:factor} {",
      " \t$0",
      "}"
    ],
    "description": "Generate a simple for"
  },
  "GoRange": {
    "prefix": "goforrange",
    "body": [
      "for index, ${1:obj} := range ${2:array-or-slice} {", 
      " \t$0",
      "}"
    ],
    "description": "Generate a simple for with range"
  },
  "GoErrorHandling": {
    "prefix": "goerr",
    "body": [
      "if err != nil {",
      " \tlog.Fatal(err)",
      "}"
    ],
    "description": "Handle error with log.Fatal"
  },
  "GoReadInput": {
    "prefix": "goreadinput",
    "body": [
      "fmt.Print(\"Enter input: \")",
      "var input ${1:type}",
      "fmt.Scanln(&input)"
    ],
    "description": "Read input from user"
  }
  
}
